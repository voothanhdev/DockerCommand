#!/bin/sh

set -e

source helper/init

command_exists() {
    command -v "$@" >/dev/null 2>&1
}

# The [ -t 1 ] check only works when the function is not called from
# a subshell (like in `$(...)` or `(...)`, so this hack redefines the
# function at the top level to always return false when stdout is not
# a tty.
if [ -t 1 ]; then
    is_tty() {
        true
    }
else
    is_tty() {
        false
    }
fi

# Adapted from code and information by Anton Kochkov (@XVilka)
# Source: https://gist.github.com/XVilka/8346728
supports_truecolor() {
    case "$COLORTERM" in
    truecolor|24bit) return 0 ;;
    esac

    case "$TERM" in
    iterm           |\
    tmux-truecolor  |\
    linux-truecolor |\
    xterm-truecolor |\
    screen-truecolor) return 0 ;;
    esac

    return 1
}

fmt_error() {
    printf '%sError: %s%s\n' "${FMT_BOLD}${FMT_RED}" "$*" "$FMT_RESET" >&2
}

setup_color() {
    # Only use colors if connected to a terminal
    if ! is_tty; then
        FMT_RAINBOW=""
        FMT_RED=""
        FMT_GREEN=""
        FMT_YELLOW=""
        FMT_BLUE=""
        FMT_BOLD=""
        FMT_RESET=""
        return
    fi

    if supports_truecolor; then
        FMT_RAINBOW="
        $(printf '\033[38;2;255;0;0m')
        $(printf '\033[38;2;255;97;0m')
        $(printf '\033[38;2;247;255;0m')
        $(printf '\033[38;2;0;255;30m')
        $(printf '\033[38;2;77;0;255m')
        $(printf '\033[38;2;168;0;255m')
        $(printf '\033[38;2;245;0;172m')
    "
    else
        FMT_RAINBOW="
        $(printf '\033[38;5;196m')
        $(printf '\033[38;5;202m')
        $(printf '\033[38;5;226m')
        $(printf '\033[38;5;082m')
        $(printf '\033[38;5;021m')
        $(printf '\033[38;5;093m')
        $(printf '\033[38;5;163m')
        "
    fi

    FMT_RED=$(printf '\033[31m')
    FMT_GREEN=$(printf '\033[32m')
    FMT_YELLOW=$(printf '\033[33m')
    FMT_BLUE=$(printf '\033[34m')
    FMT_BOLD=$(printf '\033[1m')
    FMT_RESET=$(printf '\033[0m')
}

setupLEMP() {
    umask g-w,o-w

    echo "${FMT_BLUE}Cloning Docker-LEMP by voothanhdev...${FMT_RESET}"

    command_exists git || {
        fmt_error "git is not installed"
        exit 1
    }

    ostype=$(uname)
    if [ -z "${ostype%CYGWIN*}" ] && git --version | grep -Eq 'msysgit|windows'; then
        fmt_error "Windows/MSYS Git is not supported on Cygwin"
        fmt_error "Make sure the Cygwin git package is installed and is first on the \$PATH"
        exit 1
    fi

    git clone "$REMOTE" "$LEMP"

    if echo "$SHELL" | grep "zsh" >/dev/null; then
        printf "\nexport VT_LEMP=%s\nexport PATH=\"\$VT_LEMP/bin:\$PATH\"" "$LEMP" >> "$HOME/.zshrc"
        printf "\nsource \$VT_LEMP/update" >> "$HOME/.zshrc"
    elif echo "$SHELL" | grep "csh" >/dev/null; then
        printf "\nsetenv VT_LEMP %s\nsetenv PATH \"\$VT_LEMP/bin:\$PATH\"" "$LEMP" >> "$HOME/.cshrc"
        printf "\nsource \$VT_LEMP/update" >> "$HOME/.cshrc"
    elif echo "$SHELL" | grep "ksh" >/dev/null; then
        printf "\nexport VT_LEMP=%s\nexport PATH=\"\$VT_LEMP/bin:\$PATH\"" "$LEMP" >> "$HOME/.profile"
        printf "\nsource \$VT_LEMP/update" >> "$HOME/.profile"
    elif echo "$SHELL" | grep "bash" >/dev/null; then
        printf "\nexport VT_LEMP=%s\nexport PATH=\"\$VT_LEMP/bin:\$PATH\"" "$LEMP" >> "$HOME/.bashrc"
        printf "\nsource \$VT_LEMP/update" >> "$HOME/.bashrc"
    fi

    echo
}

main() {
    setup_color

    if [ -d "$LEMP" ]; then
        echo "${FMT_YELLOW}The \$LEMP folder already exists ($LEMP).${FMT_RESET}"
        exit 1
    fi

    setupLEMP
    printf '%VooThanh Doco LEMP is now installed! Please restart your device.%s\n' "${FMT_BOLD}${FMT_GREEN}" "$FMT_RESET"
}

main "$@"